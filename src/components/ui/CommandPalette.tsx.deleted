import { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate } from 'react-router-dom';

interface Command {
  id: string;
  title: string;
  subtitle: string;
  icon: string;
  action: () => void;
}

export function CommandPalette() {
  const [isOpen, setIsOpen] = useState(false);
  const [search, setSearch] = useState('');
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [lastKeyTime, setLastKeyTime] = useState(0);
  const navigate = useNavigate();

  const commands: Command[] = [
    {
      id: 'email',
      title: 'Send Email',
      subtitle: 'kunal@kunalis.me',
      icon: '✉️',
      action: () => window.location.href = 'mailto:kunal@kunalis.me',
    },
    {
      id: 'github',
      title: 'View GitHub',
      subtitle: 'github.com/kunalb',
      icon: '💻',
      action: () => window.open('https://github.com/kunalb', '_blank'),
    },
    {
      id: 'resume',
      title: 'Download Resume',
      subtitle: 'PDF format',
      icon: '📄',
      action: () => alert('Resume download would trigger here'),
    },
    {
      id: 'projects',
      title: 'View Projects',
      subtitle: 'See my work',
      icon: '🚀',
      action: () => navigate('/projects'),
    },
    {
      id: 'blog',
      title: 'Read Blog',
      subtitle: 'Technical insights',
      icon: '📝',
      action: () => navigate('/blog'),
    },
    {
      id: 'coffee',
      title: 'Buy Me Coffee',
      subtitle: 'Support my work',
      icon: '☕',
      action: () => alert('Coffee link would open here'),
    },
  ];

  const filteredCommands = commands.filter(cmd =>
    cmd.title.toLowerCase().includes(search.toLowerCase()) ||
    cmd.subtitle.toLowerCase().includes(search.toLowerCase())
  );

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Only trigger if the user isn't typing in an input field
      const activeElement = document.activeElement;
      const isTyping = activeElement && (
        activeElement.tagName === 'INPUT' || 
        activeElement.tagName === 'TEXTAREA' || 
        activeElement.contentEditable === 'true'
      );
      
      // Open with Cmd/Ctrl + K - but not if user is typing
      if ((e.metaKey || e.ctrlKey) && e.key === 'k' && !isTyping) {
        const currentTime = Date.now();
        // Prevent rapid-fire triggering
        if (currentTime - lastKeyTime < 300) return;
        
        e.preventDefault();
        e.stopPropagation();
        setIsOpen(!isOpen);
        setSearch('');
        setSelectedIndex(0);
        setLastKeyTime(currentTime);
        return;
      }

      // Close with Escape - only if palette is open
      if (e.key === 'Escape' && isOpen) {
        e.preventDefault();
        e.stopPropagation();
        setIsOpen(false);
        return;
      }

      // Navigate with arrows - only if palette is open
      if (isOpen && filteredCommands.length > 0) {
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          e.stopPropagation();
          setSelectedIndex((prev) => (prev + 1) % filteredCommands.length);
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          e.stopPropagation();
          setSelectedIndex((prev) => (prev - 1 + filteredCommands.length) % filteredCommands.length);
        } else if (e.key === 'Enter') {
          e.preventDefault();
          e.stopPropagation();
          filteredCommands[selectedIndex].action();
          setIsOpen(false);
        }
      }
    };

    // Use capture phase to prevent issues with event bubbling
    document.addEventListener('keydown', handleKeyDown, { capture: true });
    return () => document.removeEventListener('keydown', handleKeyDown, { capture: true });
  }, [isOpen, filteredCommands, selectedIndex, lastKeyTime]);

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={(e) => {
              e.stopPropagation();
              setIsOpen(false);
            }}
            className="fixed inset-0 bg-black/80 backdrop-blur-sm z-[150]"
          />

          {/* Command palette */}
          <motion.div
            initial={{ opacity: 0, scale: 0.95, y: -20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.95, y: -20 }}
            transition={{ duration: 0.2 }}
            className="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full max-w-2xl z-[160] px-4"
          >
            <div className="glass rounded-2xl overflow-hidden shadow-2xl">
              {/* Search input */}
              <div className="p-4 border-b border-white/10">
                <input
                  type="text"
                  value={search}
                  onChange={(e) => {
                    setSearch(e.target.value);
                    setSelectedIndex(0);
                  }}
                  placeholder="Type a command or search..."
                  className="w-full bg-transparent text-white placeholder-white/40 outline-none text-lg"
                  autoFocus
                />
              </div>

              {/* Commands list */}
              <div className="max-h-96 overflow-y-auto">
                {filteredCommands.length > 0 ? (
                  filteredCommands.map((cmd, index) => (
                    <motion.button
                      key={cmd.id}
                      onClick={() => {
                        cmd.action();
                        setIsOpen(false);
                      }}
                      onMouseEnter={() => setSelectedIndex(index)}
                      className={`w-full px-4 py-3 flex items-center gap-4 transition-colors ${
                        index === selectedIndex ? 'bg-white/10' : 'hover:bg-white/5'
                      }`}
                      whileHover={{ x: 4 }}
                    >
                      <span className="text-2xl">{cmd.icon}</span>
                      <div className="text-left">
                        <div className="text-white font-medium">{cmd.title}</div>
                        <div className="text-sm text-white/60">{cmd.subtitle}</div>
                      </div>
                      {index === selectedIndex && (
                        <motion.div
                          layoutId="selected"
                          className="ml-auto text-white/40 text-sm"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                        >
                          Press Enter
                        </motion.div>
                      )}
                    </motion.button>
                  ))
                ) : (
                  <div className="px-4 py-8 text-center text-white/40">
                    No commands found
                  </div>
                )}
              </div>

              {/* Footer */}
              <div className="p-3 border-t border-white/10 flex items-center justify-between text-xs text-white/40">
                <div className="flex gap-4">
                  <span>↑↓ Navigate</span>
                  <span>↵ Select</span>
                  <span>Esc Close</span>
                </div>
                <span>Pro tip: Press ⌘K anytime</span>
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
}